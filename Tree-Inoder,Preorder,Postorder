// inoder LNR
// Preoder NLR
// Postoder LRN
// L-Left R-Right N-Node

 #include<iostream>
#include<queue>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;

    node(int d) {
        this ->data=d;
        this ->left=NULL;
        this -> right = NULL;
    }

};
node* buildTree(node* root){

    cout<< "Enter the data: " << endl;
    int data ;
    cin>> data;
    root= new node(data);
    if(data == -1){
        return NULL;
    }
    cout << "Enter data for inserting in left "<< endl;
    root->left = buildTree(root->left);
    cout << "Enter data for insert in right of " << data << endl;
    root->right =buildTree(root->right);
    return root ;

}
void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
     q.push(NULL);


    while (!q.empty()){
        node* temp = q.front();
       
        q.pop();
           
           if (temp == NULL){
            //purana level compolete ho chuka he
            cout << endl;
            if (!q.empty()) 
            {

                q.push(NULL);
            }
            
           }else{ 
            cout << temp -> data << " ";
            if (temp ->left)
        {
            q.push(temp ->left);

        }
        if (temp ->right)
        {
            q.push(temp ->right);
        }
           }





        
        
        
    }

}


// InOder
void inorder(node* root){
    if (root == NULL){
        return;
    }
    inorder(root->left);
    cout << root ->data << " ";
    inorder(root->right);
}

//PreOder
void preorder(node* root){
    //base case 
    if (root == NULL)
    {
        return ;

     }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

//PostOrder
void postorder(node* root){
    //base case 
    if (root == NULL)
    {
        return ;

     }
    
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

int main(){

    node* root =NULL;
    //creating a tree
    root = buildTree(root);

    // 1 3 7 -1 -1  11 -1 -1 5 17 -1 -1 -1

    //level oder
    cout << " Printing the level order traversal output" <<endl;
    levelOrderTraversal(root);
//inoder 
    cout << " inoder traversal is: ";
    inorder(root);

    //preoder
    cout << endl << " preoder traversal is: ";
    preorder(root);

    //postoder
    cout<< endl << " postoder traversal is: ";
    postorder(root);


    return 0;
}
